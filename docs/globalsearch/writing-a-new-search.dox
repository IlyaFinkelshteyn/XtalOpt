namespace GlobalSearch {
/**

@page newSearch How to write a new search algorithm using libglobalsearch

@section Subclass GlobalSearch::OptBase

@subsection Functions to reimplement

@subsubsection NewSearch::NewSearch(AbstractDialog *parent);

Set m_idString:
@code
  NewSearch::NewSearch(AbstractDialog *parent)
   : OptBase(parent)
  {
    m_idString = "NewSearch";
  }


@subsubsection NewSearch::~NewSearch()

This can be left blank until there are member variables that need deletion.

@subsubsection Structure* NewSearch::replaceWithRandom(Structure *s, const QString & reason = "");

This function should generate a new structure randomly and copy the
data into the structure pointed to by s and also return s.

@subsubsection bool NewSearch::checkLimits();

This function checks the parameters defining the search to find any
conflicting or illogical settings.

@subsubsection bool NewSearch::save(const QString & filename = "", bool notify = false);

@subsubsection bool NewSearch::load(const QString & filename);

@subsubsection void NewSearch::startSearch();

@subsubsection void NewSearch::generateNewStructure();

@subsubsection void NewSearch::setOptimizer_string(const QString &s, const QString &filename = "");

*/

}